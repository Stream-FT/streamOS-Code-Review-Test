import { AxiosError } from "axios";
import { ErrorRequestHandler } from "express";

export enum ErrorCode {
  UNAUTHORIZED = "UNAUTHORIZED",
  INVALID_TOKEN = "INVALID_TOKEN",
  UKNOWN_ERROR = "UKNOWN_ERROR",
  SOMETHING_WENT_WRONG = "SOMETHING_WENT_WRONG",
  UNEXPECTED_ERROR = "UNEXPECTED_ERROR",
  ADMIN_ROLE_NOT_FOUND = "ADMIN_ROLE_NOT_FOUND",
  ROLE_NOT_FOUND = "ROLE_NOT_FOUND",
  ORGANIZATION_ADMIN_ROLE_NOT_FOUND = "ORGANIZATION_ADMIN_ROLE_NOT_FOUND",
  ORGANIZATION_ROLE_NOT_FOUND = "ORGANIZATION_ROLE_NOT_FOUND",
  ADMIN_USER_NOT_FOUND = "ADMIN_USER_NOT_FOUND",
  ADMIN_USER_ALREADY_PRESENT = "ADMIN_USER_ALREADY_PRESENT",
  USER_ALREADY_EXIST = "USER_ALREADY_EXIST",
  USER_DOES_NOT_EXIST = "USER_DOES_NOT_EXIST",
  ORGANIZATION_NOT_FOUND = "ORGANIZATION_NOT_FOUND",
  ORGANIZATION_ALREADY_EXIST = "ORGANIZATION_ALREADY_EXIST",
  ORGANIZATION_IS_REQUIRED = "ORGANIZATION_IS_REQUIRED",
  CONTROLLER_ALREADY_PRESENT = "CONTROLLER_ALREADY_PRESENT",
  BENEFICIAL_OWNER_NOT_FOUND = "BENEFICIAL_OWNER_NOT_FOUND",
  BENEFICIAL_OWNER_ALREADY_PRESENT = "BENEFICIAL_OWNER_ALREADY_PRESENT",
  ORGANIZATION_CONTROLLER_NOT_FOUND = "ORGANIZATION_CONTROLLER_NOT_FOUND",
  ORGANIZATION_BENEFICIALOWNER_NOT_FOUND = "ORGANIZATION_BENEFICIALOWNER_NOT_FOUND",
  KYB_IS_ALREADY_DONE = "KYB_IS_ALREADY_DONE",
  KYB_IS_IN_PROGRESS = "KYB_IS_IN_PROGRESS",
  QUICKBOOKS_NOT_AUTHENTICATED = "QUICKBOOKS_NOT_AUTHENTICATED",
  ORGANIZATION_DWOLLA_ACCOUNT_NOT_FOUND = "ORGANIZATION_DWOLLA_ACCOUNT_NOT_FOUND",
  BENEFICIAL_OWNER_DWOLLA_ACCOUNT_NOT_FOUND = "BENEFICIAL_OWNER_DWOLLA_ACCOUNT_NOT_FOUND",
  NO_USER_FOUND_BY_AUTH0_ID = "NO_USER_FOUND_BY_AUTH0_ID",
  USER_MUST_BE_ADMIN = "USER_MUST_BE_ADMIN",
  MISSING_REDIRECT_URI = "MISSING_REDIRECT_URI",
  BAD_REQUEST = "BAD_REQUEST",
  DRIVER_ACCOUNT_ALREADY_EXISTS = "DRIVER_ACCOUNT_ALREADY_EXISTS", //todo move
  CUSTOMER_NOT_FOUND = "CUSTOMER_NOT_FOUND", //todo move
  ITEM_NOT_FOUND = "ITEM_NOT_FOUND", //todo move
  ACCOUNT_NOT_FOUND = "ACCOUNT_NOT_FOUND", //todo move
  VENDOR_NOT_FOUND = "VENDOR_NOT_FOUND", //todo move
  BILL_NOT_FOUND = "BILL_NOT_FOUND", //todo move
  BILL_PAYMENT_NOT_FOUND = "BILL_PAYMENT_NOT_FOUND", //todo move
  INVOICE_NOT_FOUND = "INVOICE_NOT_FOUND", //todo move
  PAYMENT_NOT_FOUND = "PAYMENT_NOT_FOUND", //todo move
  DRIVER_DETAILS_ALREADY_PRESENT = "DRIVER_DETAILS_ALREADY_PRESENT", //todo move
  VENDOR_ALREADY_EXISTS = "VENDOR_ALREADY_EXISTS", //todo move
  CUSTOMER_ALREADY_EXISTS = "CUSTOMER_ALREADY_EXISTS", //todo move
  FUNDING_SOURCE_NOT_VERIFIED = "FUNDING_SOURCE_NOT_VERIFIED",
  FUNDING_SOURCE_NOT_FOUND = "FUNDING_SOURCE_NOT_FOUND",
  TRANSACTION_SCHEDULE_NOT_FOUND = "TRANSACTION_SCHEDULE_NOT_FOUND",
  SAME_LEDGER_ACCOUNT = "SAME_LEDGER_ACCOUNT",
  WRONG_PAYMENT_DATE = "WRONG_PAYMENT_DATE",
  PAYMENT_ACCOUNT_NOT_VERIFIED = "PAYMENT_ACCOUNT_NOT_VERIFIED",
  CONTROLLER_DOCUMENT_NOT_FOUND = "CONTROLLER_DOCUMENT_NOT_FOUND",
  UBO_DOCUMENT_NOT_FOUND = "UBO_DOCUMENT_NOT_FOUND",
  CONTROLLER_NOT_EXIST = "CONTROLLER_NOT_EXIST",
  DOCUMENT_ALREADY_EXISTS = "DOCUMENT_ALREADY_EXISTS",
  NOT_CONNECTED_DWOLLA = "NOT_CONNECTED_DWOLLA",
  LEDGER_ACCOUNT_NOT_CREATED = "LEDGER_ACCOUNT_NOT_CREATED",
  EXCHAGE_PLAID_TOKEN_FAILED = "EXCHAGE_PLAID_TOKEN_FAILED",
  PAYMENT_NOT_POSSIBLE = "PAYMENT_NOT_POSSIBLE",
  TRANSACTION_NOT_FOUND = "TRANSACTION_NOT_FOUND",
  AC_BILL_NOT_FOUND = "AC_BILL_NOT_FOUND",
  SCHEDULED_PAYMENT_SETTLED_ERROR = "SCHEDULED_PAYMENT_SETTLED_ERROR",
  PAYMENT_SOURCE_QB_ACCOUNT_LINK_ERROR = "PAYMENT_SOURCE_QB_ACCOUNT_LINK_ERROR",
  QB_PAYMENT_SOURCE_AC_ACCOUNT_MAPPING_ERROR = "QB_PAYMENT_SOURCE_AC_ACCOUNT_MAPPING_ERROR",
  ORGANIZATION_DOCUMENT_NOT_FOUND = "ORGANIZATION_DOCUMENT_NOT_FOUND",
  INVALID_DOCUMENT_TYPE = "INVALID_DOCUMENT_TYPE",
  SETTINGS_NOT_FOUND = "SETTINGS_NOT_FOUND",
  NOT_AVAILABLE_UPDATE_SETTINGS = "NOT_AVAILABLE_UPDATE_SETTINGS",
  ORG_SETTING_NOT_FOUND = "ORG_SETTING_NOT_FOUND",
  ORG_AUTOMATION_WORKFLOW_NOT_FOUND = "ORG_AUTOMATION_WORKFLOW_NOT_FOUND",
  ORG_AUTOMATION_ENTITY_NOT_FOUND = "ORG_AUTOMATION_ENTITY_NOT_FOUND",
  CUSTOMER_EXISTED = "CUSTOMER_EXISTED",
  NO_CUSTOMERS_FOUND = "NO_CUSTOMERS_FOUND",
  UNKNOWN_ERROR = "UNKNOWN_ERROR",
  CUSTOMER_NOT_RECONCILED = "CUSTOMER_NOT_RECONCILED",
  BILLING_PERIOD_NOT_FOUND = "BILLING_PERIOD_NOT_FOUND",
}

export class CustomError {
  status: number;
  errCode: ErrorCode;
  description: string;
  data?: any;

  constructor(status: number, errCode: ErrorCode, description: string, data?: any) {
    this.status = status;
    this.errCode = errCode;
    this.description = description;
    if (data) {
      this.data = data;
    }
  }
}

export const errorMiddleware: ErrorRequestHandler = (err, _req, res, _) => {
  console.log(err);
  const statusCode = err.status || err.statusCode || err?.response?.status || 500;
  let errCode: ErrorCode;
  if (err.name === "UnauthorizedError") {
    errCode = ErrorCode.UNAUTHORIZED;
  } else if (err.code === "invalid_token") {
    errCode = ErrorCode.INVALID_TOKEN;
  } else {
    errCode = err.errCode || ErrorCode.UKNOWN_ERROR;
  }

  let description;
  if (err.description != null) {
    description = err.description;
  } else if (err.message != null) {
    description = err.message;
  } else if (err.error_message != null) {
    description = err.error_message;
  } else {
    description = "Something went wrong!";
  }

  if (err instanceof AxiosError) {
    errCode = err?.response?.data?.error || "UNKNOWN_ERROR";
    description = err?.response?.data?.description || "Something went wrong!";
  }

  const response: any = { status: statusCode, error: errCode, description: description };
  if (err.data) {
    response.data = err.data;
  }
  res.status(statusCode).json(response);
};
